/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace <a class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's Open API v2</a>, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.ShopReceipt;
import org.openapitools.client.model.ShopReceipts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShopReceiptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShopReceiptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShopReceiptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createReceiptShipment
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The receipt to submit tracking for. (required)
     * @param trackingCode The tracking code for this receipt. (optional)
     * @param carrierName The carrier name for this receipt. (optional)
     * @param sendBcc If true, the shipping notification will be sent to the seller as well (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single ShopReceipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a request conflict with current state of the target resource. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptShipmentCall(Integer shopId, Integer receiptId, String trackingCode, String carrierName, Boolean sendBcc, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/application/shops/{shop_id}/receipts/{receipt_id}/tracking"
            .replaceAll("\\{" + "shop_id" + "\\}", localVarApiClient.escapeString(shopId.toString()))
            .replaceAll("\\{" + "receipt_id" + "\\}", localVarApiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trackingCode != null) {
            localVarFormParams.put("tracking_code", trackingCode);
        }

        if (carrierName != null) {
            localVarFormParams.put("carrier_name", carrierName);
        }

        if (sendBcc != null) {
            localVarFormParams.put("send_bcc", sendBcc);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceiptShipmentValidateBeforeCall(Integer shopId, Integer receiptId, String trackingCode, String carrierName, Boolean sendBcc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling createReceiptShipment(Async)");
        }
        
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling createReceiptShipment(Async)");
        }
        

        okhttp3.Call localVarCall = createReceiptShipmentCall(shopId, receiptId, trackingCode, carrierName, sendBcc, _callback);
        return localVarCall;

    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren&#39;t sent, the receipt is marked as shipped only. 
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The receipt to submit tracking for. (required)
     * @param trackingCode The tracking code for this receipt. (optional)
     * @param carrierName The carrier name for this receipt. (optional)
     * @param sendBcc If true, the shipping notification will be sent to the seller as well (optional)
     * @return ShopReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single ShopReceipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a request conflict with current state of the target resource. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ShopReceipt createReceiptShipment(Integer shopId, Integer receiptId, String trackingCode, String carrierName, Boolean sendBcc) throws ApiException {
        ApiResponse<ShopReceipt> localVarResp = createReceiptShipmentWithHttpInfo(shopId, receiptId, trackingCode, carrierName, sendBcc);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren&#39;t sent, the receipt is marked as shipped only. 
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The receipt to submit tracking for. (required)
     * @param trackingCode The tracking code for this receipt. (optional)
     * @param carrierName The carrier name for this receipt. (optional)
     * @param sendBcc If true, the shipping notification will be sent to the seller as well (optional)
     * @return ApiResponse&lt;ShopReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single ShopReceipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a request conflict with current state of the target resource. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopReceipt> createReceiptShipmentWithHttpInfo(Integer shopId, Integer receiptId, String trackingCode, String carrierName, Boolean sendBcc) throws ApiException {
        okhttp3.Call localVarCall = createReceiptShipmentValidateBeforeCall(shopId, receiptId, trackingCode, carrierName, sendBcc, null);
        Type localVarReturnType = new TypeToken<ShopReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren&#39;t sent, the receipt is marked as shipped only. 
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The receipt to submit tracking for. (required)
     * @param trackingCode The tracking code for this receipt. (optional)
     * @param carrierName The carrier name for this receipt. (optional)
     * @param sendBcc If true, the shipping notification will be sent to the seller as well (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single ShopReceipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There was a request conflict with current state of the target resource. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptShipmentAsync(Integer shopId, Integer receiptId, String trackingCode, String carrierName, Boolean sendBcc, final ApiCallback<ShopReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceiptShipmentValidateBeforeCall(shopId, receiptId, trackingCode, carrierName, sendBcc, _callback);
        Type localVarReturnType = new TypeToken<ShopReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShopReceipt
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Shop Receipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopReceiptCall(Integer shopId, Integer receiptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/application/shops/{shop_id}/receipts/{receipt_id}"
            .replaceAll("\\{" + "shop_id" + "\\}", localVarApiClient.escapeString(shopId.toString()))
            .replaceAll("\\{" + "receipt_id" + "\\}", localVarApiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShopReceiptValidateBeforeCall(Integer shopId, Integer receiptId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling getShopReceipt(Async)");
        }
        
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getShopReceipt(Async)");
        }
        

        okhttp3.Call localVarCall = getShopReceiptCall(shopId, receiptId, _callback);
        return localVarCall;

    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Retrieves a receipt, identified by a receipt id, from an Etsy shop
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @return ShopReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Shop Receipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ShopReceipt getShopReceipt(Integer shopId, Integer receiptId) throws ApiException {
        ApiResponse<ShopReceipt> localVarResp = getShopReceiptWithHttpInfo(shopId, receiptId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Retrieves a receipt, identified by a receipt id, from an Etsy shop
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @return ApiResponse&lt;ShopReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Shop Receipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopReceipt> getShopReceiptWithHttpInfo(Integer shopId, Integer receiptId) throws ApiException {
        okhttp3.Call localVarCall = getShopReceiptValidateBeforeCall(shopId, receiptId, null);
        Type localVarReturnType = new TypeToken<ShopReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Retrieves a receipt, identified by a receipt id, from an Etsy shop
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param receiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Shop Receipt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopReceiptAsync(Integer shopId, Integer receiptId, final ApiCallback<ShopReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShopReceiptValidateBeforeCall(shopId, receiptId, _callback);
        Type localVarReturnType = new TypeToken<ShopReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShopReceipts
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param minCreated The earliest unix timestamp for when a record was created. (optional)
     * @param maxCreated The latest unix timestamp for when a record was created. (optional)
     * @param minLastModified The earliest unix timestamp for when a record last changed. (optional)
     * @param maxLastModified The latest unix timestamp for when a record last changed. (optional)
     * @param limit The maximum number of results to return. (optional, default to 25)
     * @param offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param wasPaid When true, the seller recieved payment for the product(s) in this receipt. (optional)
     * @param wasShipped When true, the seller shipped the product(s) in this receipt. (optional)
     * @param wasDelivered When true, returns receipts that have been delivered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Shop Receipts </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopReceiptsCall(Integer shopId, Integer minCreated, Integer maxCreated, Integer minLastModified, Integer maxLastModified, Integer limit, Integer offset, Boolean wasPaid, Boolean wasShipped, Boolean wasDelivered, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/application/shops/{shop_id}/receipts"
            .replaceAll("\\{" + "shop_id" + "\\}", localVarApiClient.escapeString(shopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_created", minCreated));
        }

        if (maxCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_created", maxCreated));
        }

        if (minLastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_last_modified", minLastModified));
        }

        if (maxLastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_last_modified", maxLastModified));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (wasPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("was_paid", wasPaid));
        }

        if (wasShipped != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("was_shipped", wasShipped));
        }

        if (wasDelivered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("was_delivered", wasDelivered));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShopReceiptsValidateBeforeCall(Integer shopId, Integer minCreated, Integer maxCreated, Integer minLastModified, Integer maxLastModified, Integer limit, Integer offset, Boolean wasPaid, Boolean wasShipped, Boolean wasDelivered, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling getShopReceipts(Async)");
        }
        

        okhttp3.Call localVarCall = getShopReceiptsCall(shopId, minCreated, maxCreated, minLastModified, maxLastModified, limit, offset, wasPaid, wasShipped, wasDelivered, _callback);
        return localVarCall;

    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases.
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param minCreated The earliest unix timestamp for when a record was created. (optional)
     * @param maxCreated The latest unix timestamp for when a record was created. (optional)
     * @param minLastModified The earliest unix timestamp for when a record last changed. (optional)
     * @param maxLastModified The latest unix timestamp for when a record last changed. (optional)
     * @param limit The maximum number of results to return. (optional, default to 25)
     * @param offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param wasPaid When true, the seller recieved payment for the product(s) in this receipt. (optional)
     * @param wasShipped When true, the seller shipped the product(s) in this receipt. (optional)
     * @param wasDelivered When true, returns receipts that have been delivered. (optional)
     * @return ShopReceipts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Shop Receipts </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ShopReceipts getShopReceipts(Integer shopId, Integer minCreated, Integer maxCreated, Integer minLastModified, Integer maxLastModified, Integer limit, Integer offset, Boolean wasPaid, Boolean wasShipped, Boolean wasDelivered) throws ApiException {
        ApiResponse<ShopReceipts> localVarResp = getShopReceiptsWithHttpInfo(shopId, minCreated, maxCreated, minLastModified, maxLastModified, limit, offset, wasPaid, wasShipped, wasDelivered);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases.
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param minCreated The earliest unix timestamp for when a record was created. (optional)
     * @param maxCreated The latest unix timestamp for when a record was created. (optional)
     * @param minLastModified The earliest unix timestamp for when a record last changed. (optional)
     * @param maxLastModified The latest unix timestamp for when a record last changed. (optional)
     * @param limit The maximum number of results to return. (optional, default to 25)
     * @param offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param wasPaid When true, the seller recieved payment for the product(s) in this receipt. (optional)
     * @param wasShipped When true, the seller shipped the product(s) in this receipt. (optional)
     * @param wasDelivered When true, returns receipts that have been delivered. (optional)
     * @return ApiResponse&lt;ShopReceipts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Shop Receipts </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopReceipts> getShopReceiptsWithHttpInfo(Integer shopId, Integer minCreated, Integer maxCreated, Integer minLastModified, Integer maxLastModified, Integer limit, Integer offset, Boolean wasPaid, Boolean wasShipped, Boolean wasDelivered) throws ApiException {
        okhttp3.Call localVarCall = getShopReceiptsValidateBeforeCall(shopId, minCreated, maxCreated, minLastModified, maxLastModified, limit, offset, wasPaid, wasShipped, wasDelivered, null);
        Type localVarReturnType = new TypeToken<ShopReceipts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases.
     * @param shopId The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param minCreated The earliest unix timestamp for when a record was created. (optional)
     * @param maxCreated The latest unix timestamp for when a record was created. (optional)
     * @param minLastModified The earliest unix timestamp for when a record last changed. (optional)
     * @param maxLastModified The latest unix timestamp for when a record last changed. (optional)
     * @param limit The maximum number of results to return. (optional, default to 25)
     * @param offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param wasPaid When true, the seller recieved payment for the product(s) in this receipt. (optional)
     * @param wasShipped When true, the seller shipped the product(s) in this receipt. (optional)
     * @param wasDelivered When true, returns receipts that have been delivered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Shop Receipts </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request attempted to perform an operation it is not allowed to. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A resource could not be found. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a problem with the request data. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request lacks valid authentication credentials. See the error message for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error. See the error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopReceiptsAsync(Integer shopId, Integer minCreated, Integer maxCreated, Integer minLastModified, Integer maxLastModified, Integer limit, Integer offset, Boolean wasPaid, Boolean wasShipped, Boolean wasDelivered, final ApiCallback<ShopReceipts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShopReceiptsValidateBeforeCall(shopId, minCreated, maxCreated, minLastModified, maxLastModified, limit, offset, wasPaid, wasShipped, wasDelivered, _callback);
        Type localVarReturnType = new TypeToken<ShopReceipts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
