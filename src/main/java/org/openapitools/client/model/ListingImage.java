/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace <a class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's Open API v2</a>, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Reference urls and metadata for an image associated with a specific listing. The &#x60;url_fullxfull&#x60; parameter contains the URL for full-sized binary image file.
 */
@ApiModel(description = "Reference urls and metadata for an image associated with a specific listing. The `url_fullxfull` parameter contains the URL for full-sized binary image file.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-08T15:52:16.342-04:00[America/Toronto]")
public class ListingImage {
  public static final String SERIALIZED_NAME_LISTING_ID = "listing_id";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private Integer listingId;

  public static final String SERIALIZED_NAME_LISTING_IMAGE_ID = "listing_image_id";
  @SerializedName(SERIALIZED_NAME_LISTING_IMAGE_ID)
  private Integer listingImageId;

  public static final String SERIALIZED_NAME_HEX_CODE = "hex_code";
  @SerializedName(SERIALIZED_NAME_HEX_CODE)
  private String hexCode;

  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  private Integer red;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  private Integer green;

  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  private Integer blue;

  public static final String SERIALIZED_NAME_HUE = "hue";
  @SerializedName(SERIALIZED_NAME_HUE)
  private Integer hue;

  public static final String SERIALIZED_NAME_SATURATION = "saturation";
  @SerializedName(SERIALIZED_NAME_SATURATION)
  private Integer saturation;

  public static final String SERIALIZED_NAME_BRIGHTNESS = "brightness";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS)
  private Integer brightness;

  public static final String SERIALIZED_NAME_IS_BLACK_AND_WHITE = "is_black_and_white";
  @SerializedName(SERIALIZED_NAME_IS_BLACK_AND_WHITE)
  private Boolean isBlackAndWhite;

  public static final String SERIALIZED_NAME_CREATION_TSZ = "creation_tsz";
  @SerializedName(SERIALIZED_NAME_CREATION_TSZ)
  private Integer creationTsz;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_URL75X75 = "url_75x75";
  @SerializedName(SERIALIZED_NAME_URL75X75)
  private String url75x75;

  public static final String SERIALIZED_NAME_URL170X135 = "url_170x135";
  @SerializedName(SERIALIZED_NAME_URL170X135)
  private String url170x135;

  public static final String SERIALIZED_NAME_URL570X_N = "url_570xN";
  @SerializedName(SERIALIZED_NAME_URL570X_N)
  private String url570xN;

  public static final String SERIALIZED_NAME_URL_FULLXFULL = "url_fullxfull";
  @SerializedName(SERIALIZED_NAME_URL_FULLXFULL)
  private String urlFullxfull;

  public static final String SERIALIZED_NAME_FULL_HEIGHT = "full_height";
  @SerializedName(SERIALIZED_NAME_FULL_HEIGHT)
  private Integer fullHeight;

  public static final String SERIALIZED_NAME_FULL_WIDTH = "full_width";
  @SerializedName(SERIALIZED_NAME_FULL_WIDTH)
  private Integer fullWidth;

  public ListingImage() { 
  }

  public ListingImage listingId(Integer listingId) {
    
    this.listingId = listingId;
    return this;
  }

   /**
   * The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
   * minimum: 1
   * @return listingId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")

  public Integer getListingId() {
    return listingId;
  }


  public void setListingId(Integer listingId) {
    this.listingId = listingId;
  }


  public ListingImage listingImageId(Integer listingImageId) {
    
    this.listingImageId = listingImageId;
    return this;
  }

   /**
   * The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
   * minimum: 1
   * @return listingImageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.")

  public Integer getListingImageId() {
    return listingImageId;
  }


  public void setListingImageId(Integer listingImageId) {
    this.listingImageId = listingImageId;
  }


  public ListingImage hexCode(String hexCode) {
    
    this.hexCode = hexCode;
    return this;
  }

   /**
   * The webhex string for the image&#39;s average color, in webhex notation.
   * @return hexCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The webhex string for the image's average color, in webhex notation.")

  public String getHexCode() {
    return hexCode;
  }


  public void setHexCode(String hexCode) {
    this.hexCode = hexCode;
  }


  public ListingImage red(Integer red) {
    
    this.red = red;
    return this;
  }

   /**
   * The numeric red value equal to the image&#39;s average red value, from 0-255 (RGB color).
   * minimum: 0
   * @return red
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric red value equal to the image's average red value, from 0-255 (RGB color).")

  public Integer getRed() {
    return red;
  }


  public void setRed(Integer red) {
    this.red = red;
  }


  public ListingImage green(Integer green) {
    
    this.green = green;
    return this;
  }

   /**
   * The numeric red value equal to the image&#39;s average red value, from 0-255 (RGB color).
   * minimum: 0
   * @return green
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric red value equal to the image's average red value, from 0-255 (RGB color).")

  public Integer getGreen() {
    return green;
  }


  public void setGreen(Integer green) {
    this.green = green;
  }


  public ListingImage blue(Integer blue) {
    
    this.blue = blue;
    return this;
  }

   /**
   * The numeric red value equal to the image&#39;s average red value, from 0-255 (RGB color).
   * minimum: 0
   * @return blue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric red value equal to the image's average red value, from 0-255 (RGB color).")

  public Integer getBlue() {
    return blue;
  }


  public void setBlue(Integer blue) {
    this.blue = blue;
  }


  public ListingImage hue(Integer hue) {
    
    this.hue = hue;
    return this;
  }

   /**
   * The numeric hue equal to the image&#39;s average hue, from 0-360 (HSV color).
   * minimum: 0
   * @return hue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric hue equal to the image's average hue, from 0-360 (HSV color).")

  public Integer getHue() {
    return hue;
  }


  public void setHue(Integer hue) {
    this.hue = hue;
  }


  public ListingImage saturation(Integer saturation) {
    
    this.saturation = saturation;
    return this;
  }

   /**
   * The numeric saturation equal to the image&#39;s average saturation, from 0-100 (HSV color).
   * minimum: 0
   * @return saturation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).")

  public Integer getSaturation() {
    return saturation;
  }


  public void setSaturation(Integer saturation) {
    this.saturation = saturation;
  }


  public ListingImage brightness(Integer brightness) {
    
    this.brightness = brightness;
    return this;
  }

   /**
   * The numeric brightness equal to the image&#39;s average brightness, from 0-100 (HSV color).
   * minimum: 0
   * @return brightness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).")

  public Integer getBrightness() {
    return brightness;
  }


  public void setBrightness(Integer brightness) {
    this.brightness = brightness;
  }


  public ListingImage isBlackAndWhite(Boolean isBlackAndWhite) {
    
    this.isBlackAndWhite = isBlackAndWhite;
    return this;
  }

   /**
   * When true, the image is in black &amp; white.
   * @return isBlackAndWhite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "When true, the image is in black & white.")

  public Boolean getIsBlackAndWhite() {
    return isBlackAndWhite;
  }


  public void setIsBlackAndWhite(Boolean isBlackAndWhite) {
    this.isBlackAndWhite = isBlackAndWhite;
  }


  public ListingImage creationTsz(Integer creationTsz) {
    
    this.creationTsz = creationTsz;
    return this;
  }

   /**
   * The listing image\\&#39;s creation time, in epoch seconds.
   * minimum: 0
   * @return creationTsz
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The listing image\\'s creation time, in epoch seconds.")

  public Integer getCreationTsz() {
    return creationTsz;
  }


  public void setCreationTsz(Integer creationTsz) {
    this.creationTsz = creationTsz;
  }


  public ListingImage rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
   * minimum: 0
   * @return rank
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public ListingImage url75x75(String url75x75) {
    
    this.url75x75 = url75x75;
    return this;
  }

   /**
   * The url string for a 75x75 pixel thumbnail of the image.
   * @return url75x75
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url string for a 75x75 pixel thumbnail of the image.")

  public String getUrl75x75() {
    return url75x75;
  }


  public void setUrl75x75(String url75x75) {
    this.url75x75 = url75x75;
  }


  public ListingImage url170x135(String url170x135) {
    
    this.url170x135 = url170x135;
    return this;
  }

   /**
   * The url string for a 170x135 pixel thumbnail of the image.
   * @return url170x135
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url string for a 170x135 pixel thumbnail of the image.")

  public String getUrl170x135() {
    return url170x135;
  }


  public void setUrl170x135(String url170x135) {
    this.url170x135 = url170x135;
  }


  public ListingImage url570xN(String url570xN) {
    
    this.url570xN = url570xN;
    return this;
  }

   /**
   * The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
   * @return url570xN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.")

  public String getUrl570xN() {
    return url570xN;
  }


  public void setUrl570xN(String url570xN) {
    this.url570xN = url570xN;
  }


  public ListingImage urlFullxfull(String urlFullxfull) {
    
    this.urlFullxfull = urlFullxfull;
    return this;
  }

   /**
   * The url string for the full-size image, up to 3000 pixels in each dimension.
   * @return urlFullxfull
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url string for the full-size image, up to 3000 pixels in each dimension.")

  public String getUrlFullxfull() {
    return urlFullxfull;
  }


  public void setUrlFullxfull(String urlFullxfull) {
    this.urlFullxfull = urlFullxfull;
  }


  public ListingImage fullHeight(Integer fullHeight) {
    
    this.fullHeight = fullHeight;
    return this;
  }

   /**
   * The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
   * minimum: 0
   * @return fullHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.")

  public Integer getFullHeight() {
    return fullHeight;
  }


  public void setFullHeight(Integer fullHeight) {
    this.fullHeight = fullHeight;
  }


  public ListingImage fullWidth(Integer fullWidth) {
    
    this.fullWidth = fullWidth;
    return this;
  }

   /**
   * The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
   * minimum: 0
   * @return fullWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.")

  public Integer getFullWidth() {
    return fullWidth;
  }


  public void setFullWidth(Integer fullWidth) {
    this.fullWidth = fullWidth;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingImage listingImage = (ListingImage) o;
    return Objects.equals(this.listingId, listingImage.listingId) &&
        Objects.equals(this.listingImageId, listingImage.listingImageId) &&
        Objects.equals(this.hexCode, listingImage.hexCode) &&
        Objects.equals(this.red, listingImage.red) &&
        Objects.equals(this.green, listingImage.green) &&
        Objects.equals(this.blue, listingImage.blue) &&
        Objects.equals(this.hue, listingImage.hue) &&
        Objects.equals(this.saturation, listingImage.saturation) &&
        Objects.equals(this.brightness, listingImage.brightness) &&
        Objects.equals(this.isBlackAndWhite, listingImage.isBlackAndWhite) &&
        Objects.equals(this.creationTsz, listingImage.creationTsz) &&
        Objects.equals(this.rank, listingImage.rank) &&
        Objects.equals(this.url75x75, listingImage.url75x75) &&
        Objects.equals(this.url170x135, listingImage.url170x135) &&
        Objects.equals(this.url570xN, listingImage.url570xN) &&
        Objects.equals(this.urlFullxfull, listingImage.urlFullxfull) &&
        Objects.equals(this.fullHeight, listingImage.fullHeight) &&
        Objects.equals(this.fullWidth, listingImage.fullWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listingId, listingImageId, hexCode, red, green, blue, hue, saturation, brightness, isBlackAndWhite, creationTsz, rank, url75x75, url170x135, url570xN, urlFullxfull, fullHeight, fullWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingImage {\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    listingImageId: ").append(toIndentedString(listingImageId)).append("\n");
    sb.append("    hexCode: ").append(toIndentedString(hexCode)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    hue: ").append(toIndentedString(hue)).append("\n");
    sb.append("    saturation: ").append(toIndentedString(saturation)).append("\n");
    sb.append("    brightness: ").append(toIndentedString(brightness)).append("\n");
    sb.append("    isBlackAndWhite: ").append(toIndentedString(isBlackAndWhite)).append("\n");
    sb.append("    creationTsz: ").append(toIndentedString(creationTsz)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    url75x75: ").append(toIndentedString(url75x75)).append("\n");
    sb.append("    url170x135: ").append(toIndentedString(url170x135)).append("\n");
    sb.append("    url570xN: ").append(toIndentedString(url570xN)).append("\n");
    sb.append("    urlFullxfull: ").append(toIndentedString(urlFullxfull)).append("\n");
    sb.append("    fullHeight: ").append(toIndentedString(fullHeight)).append("\n");
    sb.append("    fullWidth: ").append(toIndentedString(fullWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

